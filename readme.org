* Spiderweb
  Wiki software built on the idea of creating many interconnecting links between
  ideas, much like a spiderweb
* Org Mode
  When fantastic tools like Emacs' org-mode already exist for keeping notes, why
  create a new one? There are three primary ways that the spiderweb differs from
  org-mode : inter-connectivity, orderless organization, and related information
** Inter-connectivity
   - The spiderweb wiki is designed to function more like a wiki, so that information
     can easily be accessed by users other than the writer
   - This is especially useful if you want to run a pen-and-paper RPG for your
     friends and have an easy way to share and collaborate information with your
     players (which is why I wrote the application)
** Orderless Organization
   - From "CLOSOS - Specification of a Lisp operating system" by Robert Strandh :
     "most things are not naturally hierarchical. A hierarchical organization imposes
     an artificial order between names. Whether a document is called
     ~Lisp/Programs/2013/stuff~, ~Programs/Lisp/2013/stuff~, or something else like
     ~2013/Programs/Lisp/Stuff~, is usually not important."
   - Using org-mode headings to organize information, as most people are wont to do
     when writing in org-mode, a hierarchical structure is enforced when it likely
     isn't the best fit for your information
   - There are other options (like using org's tags) but they aren't exactly
     convenient
   - So the Spiderweb takes the opposite approach, preferring to link between notes
     with an orderless categorization system
** Relatives
   - Org-mode does not necessarily make it easy to find information that is related
     to what you are currently looking at
   - If it's placed under the same heading, sure, it's easy to find. But what if it's
     somewhere else?
* Justification
** Web Technology
   - If you're anything like me, having lived your whole life with atrocious rural
     "internet," then the proliferation of "web apps" over native software is likely
     to be distasteful
   - However, for this use case, I believe the benefits (easy cross-platform
     operation, the ability to work on a project away from home or on your phone
     without needing to carry around multiple copies of an org document and keep them
     in sync, the ability to run the software "in the cloud," the ability to easily
     share information with others without making them download a text document,
     etc.) outweigh the drawbacks
** Lisp
   - Why is this software written in Common Lisp, a language that no one has cared
     about for 25 years?
   - Because it's the language that I prefer, I'm the one who wrote this software,
     and I wrote it primarily for my own use; if others can find it useful, then
     please use it! But mass adoption isn't really the goal
* Compatibility
** Lisp Implementations
   - Spiderweb Wiki is written using portable Common Lisp, so it should run on any
     standard-conforming implementation
   - But it's developed on CCL and SBCL, so they'll likely work best
** Operating Systems
   - Spiderweb Wiki is written and tested on Ubuntu 22.04, but any Linux distribution
     should be fine
   - Other operating systems are untested, but they might work
* Setup
  - Make a file ~conf.lisp~ in the main directory with the rest of the source
  - Start ~conf.lisp~ with the following contents
#+begin_src lisp
(in-package :web)
#+end_src
** Storage
*** Local Files
    - If you can store the files locally (on the same machine the server is running
      from), the setup is easy: add the following lines to ~conf.lisp~
#+begin_src lisp
(defparameter *storage-type* :local)
(defparameter *base-path* "<path to the folder where the data will be stored>/")
#+end_src
*** S3
    - Not implemented yet
** Proxy
   - Spiderweb wiki is designed to be run behind a reverse-proxy, like Nginx
   - The following is a sample nginx configuration
#+begin_src conf
http {
     upstream hunchentoot {
       server 127.0.0.1:5000;
     }

     server {
       listen 80;
       listen [::]:80;
       server_name wiki.example.com;

       location / {
         proxy_pass http://hunchentoot;
       }
     }
}
#+end_src
** Jquery
*** Automatic (Recommended) 
    - If you want Spiderweb Wiki to automatically download and use the correct
      version of jquery, add the following to ~conf.lisp~
#+begin_src lisp
  (defparameter *jquery-source* :web)
  (defparameter *jquery-path* nil) ; this variable can be set to an URL if you want
                                   ; to use a different version of JQuery or a 
                                   ; different source than the official CDN
#+end_src
*** Local
    - If you want to serve a local copy, add the following instead :
#+begin_src lisp
(defparameter *jquery-source* :local)
(defparameter *jquery-path* "<path to the jquery file.js>")
#+end_src
*** External CDN
    - If you have /extremely/ limited resources on the server, you could use an
      external CDN to serve the file
    - Note that the wiki will cache jquery on clients, so it shouldn't be necessary
      to use a CDN because of slow internet connections
#+begin_src lisp
(defparameter *jquery-source* :cdn)
(defparameter *jquery-path* "<jquery url>")
#+end_src
* Dependencies
  - Spiderweb Wiki depends on OpenSSL, which can be installed with the ~libssl-dev~
    package on Debian-derived distros
* Running the Program
  - After setting up ~conf.lisp~, you can run the application in the terminal by
    using the following commands
#+begin_src eshell
$ cd <source directory>
$ <lisp command> --load "web.asd"
#+end_src
  - Inside the REPL
#+begin_src lisp
> (asdf:load-system "web")
> (web:run)
#+end_src
  - Once it's running, you can start Nginx to redirect HTTP traffic to the server
